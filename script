if hookmetamethod then 
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua"))()
end 

local players = game:GetService("Players")
local pingRemote = game:GetService("ReplicatedStorage"):WaitForChild("PingRem")
local random = Random.new()
local fpsDropdown 
local pingDropdown
local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()
local w = library:CreateWindow("Flexer")

if not (hookfunction or hookmetamethod) then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Error",
        Text = "Your exploit does not support this script",
        Icon = "rbxassetid://18911855792",
        Duration = 5
    })
else

game:GetService("StarterGui"):SetCore("SendNotification",{
    Title = "Flexer loaded",
    Text = "Created by .void__",
    Icon = "rbxassetid://18911834990",
    Duration = 5
})

if not hookfunction then 
    game:GetService("StarterGui"):SetCore("SendNotification",{
        Title = "FPS UI was not loaded",
        Text = "Your exploit does not support hookfunction",
        Icon = "rbxassetid://18911855792",
        Duration = 5
    }) 
end

if not hookmetamethod then 
    game:GetService("StarterGui"):SetCore("SendNotification",{
        Title = "Ping UI was not loaded",
        Text = "Your exploit does not support hookmetamethod",
        Icon = "rbxassetid://18911855792",
        Duration = 5
    })
end

local settings = {
    fps = {
        value = 60,
        maxToSubtract = 10,
        realistic = false,
        constant = false,
        copy = false,
        targetName = players.LocalPlayer.Name,
        min = 1,
        max = 2500,
        placeholder = false
    },
    ping = {
        value = 60,
        maxToSubtract = 10,
        realistic = false,
        constant = false,
        copy = false,
        targetName = players.LocalPlayer.Name,
        min = -math.huge,
        max = math.huge,
        placeholder = false,
        chaos = {
            on = false,
            min = -2^62,
            max = 2^62,
            noDecimals = false
        }
    }
}

local function getValue(valueType)
    if settings[valueType].placeholder or settings[valueType].chaos and settings[valueType].chaos.on then 
        return nil 
    end
    if settings[valueType].copy then 
        if valueType == "fps" then
            return tonumber(workspace[settings[valueType].targetName].Head.fpsGui.FPS.Text:sub(6,-1))
        elseif valueType == "ping" then
            return nil
        end
    elseif settings[valueType].constant then 
        return math.max(math.min(settings[valueType].value, settings[valueType].max), settings[valueType].min)
    elseif settings[valueType].realistic then 
        return math.max(math.min(settings[valueType].value, settings[valueType].max), settings[valueType].min) - math.random(0, settings[valueType].maxToSubtract)
    end
    return nil
end

local function parseNumber(value, chaos)
    if table.find({"inf", "infinite", "infinity"}, value) then 
        return chaos and 2^32 or math.huge
    elseif table.find({"-inf", "-infinite", "-infinity"}, value) then
        return chaos and -2^32 or -math.huge
    else
        return tonumber(value) or 0/0
    end
end

local function loadFPSUI()
    local b = w:CreateFolder("FPS Modifier")
    local c = w:CreateFolder("FPS Copier")
    
    b:Toggle("Realistic FPS", function(bool)
        settings.fps.realistic = bool
    end)
    
    b:Toggle("Constant FPS", function(bool)
        settings.fps.constant = bool
    end)
    
    b:Toggle("0 FPS (will reset you)", function(bool)
        settings.fps.placeholder = bool
        if settings.fps.placeholder then 
            players.LocalPlayer.Character.Humanoid.Health = 0 
        end
    end)
    
    b:Box("FPS", "number", function(value)
        settings.fps.value = value
    end)
    
    b:Box("Realistic FPS Range", "number", function(value)
        settings.fps.maxToSubtract = value
    end)
    
    c:Toggle("Copy FPS", function(bool)
        settings.fps.copy = bool 
    end)
    
    fpsDropdown = c:Dropdown("Player List", players:GetPlayers(), true, function(plrName)
        settings.fps.targetName = plrName
    end)
end

local function loadPingUI()
    local d = w:CreateFolder("Ping Modifier")
    local e = w:CreateFolder("Ping Copier")
    local f = w:CreateFolder("Ping Chaos")
    
    d:Toggle("Realistic Ping", function(bool)
        settings.ping.realistic = bool
    end)
    
    d:Toggle("Constant Ping", function(bool)
        settings.ping.constant = bool
    end)

    d:Toggle("Placeholder Ping (will reset you)", function(bool)
        settings.ping.placeholder = bool
        if settings.ping.placeholder then 
            players.LocalPlayer.Character.Humanoid.Health = 0 
        end
    end)
    
    d:Box("Ping", "string", function(value)
        settings.ping.value = parseNumber(value, false)
    end)
    
    d:Box("Realistic Ping Range", "string", function(value)
        settings.ping.maxToSubtract = parseNumber(value, false)
    end)
    
    e:Toggle("Copy Ping", function(bool)
        settings.ping.copy = bool 
    end)
    
    pingDropdown = e:Dropdown("Player List", players:GetPlayers(), true, function(plrName)
        settings.ping.targetName = plrName
    end)

    f:Toggle("Chaos Ping", function(bool)
        settings.ping.chaos.on = bool
    end)
    
    f:Toggle("No Decimals", function(bool)
        settings.ping.chaos.noDecimals = bool
    end)
    
    f:Box("Minimum Ping", "string", function(value)
        settings.ping.chaos.min = parseNumber(value, true)
    end)

    f:Box("Maximum Ping", "string", function(value)
        settings.ping.chaos.max = parseNumber(value, true)
    end)
end

if hookfunction then 
    loadFPSUI()
    for i,v in pairs(getgc()) do
        if type(v) == "function" and getfenv(v).script == players.LocalPlayer.PlayerScripts.Initiator.Framework then
            if debug.getinfo(v).numparams == 3 then
                hookfunction(v, function() 
                    return getValue("fps")
                end)
            end
        end
    end
end

if hookmetamethod then
    loadPingUI()
    local namecall
    namecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        if method == "FireServer" and self == pingRemote and not checkcaller() then
            local args = {...}
            args[1] = getValue("ping")
            return namecall(self, unpack(args))
        end
        return namecall(self, ...)
    end)
end

players.PlayerAdded:Connect(function()
    if hookfunction then
        fpsDropdown:Refresh(players:GetPlayers())
    end
    if hookmetamethod then
        pingDropdown:Refresh(players:GetPlayers())
    end
end)

players.PlayerRemoving:Connect(function()
    if hookfunction then
        fpsDropdown:Refresh(players:GetPlayers())
    end
    if hookmetamethod then
        pingDropdown:Refresh(players:GetPlayers())
    end
end)

coroutine.wrap(function()
    local chaosMin
    local chaosMax
    while task.wait() do 
        if settings.ping.chaos.on then 
            chaosMin = settings.ping.chaos.min
            chaosMax = settings.ping.chaos.max
            if settings.ping.chaos.noDecimals then
                pingRemote:FireServer(random:NextInteger(chaosMin, chaosMax))
            else 
                pingRemote:FireServer(random:NextNumber(chaosMin, chaosMax))
            end
        elseif settings.ping.copy then
            if workspace:FindFirstChild(settings.ping.targetName) then
                pingRemote:FireServer(tonumber(workspace[settings.ping.targetName].Head.fpsGui.Ping.Text:sub(6,-1)))
            end
        end 
    end 
end)()

end
