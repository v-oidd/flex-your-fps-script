--// Notfication function \\--
local function notify(notification: table)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = notification.title,
        Text = notification.text,
        Icon = notification.icon,
        Duration = 5
    })
end

--// Check for exploit functions \\--
if not (hookfunction or hookmetamethod) then
    notify{title = "Error", text = "Your exploit does not support this script", icon = "rbxassetid://18911855792"}
else

--// Local variables \\--
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local localScript = localPlayer.PlayerScripts.System.Handler
local pingRemote = game:GetService("ReplicatedStorage"):WaitForChild("PingRem")
local random = Random.new()
local fpsDropdown
local pingDropdown
local fakePing = false
local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()
local w = library:CreateWindow("Flexer")

--// Notifications \\--
notify{title = "Flexer loaded", text = "Created by .void__", icon = "rbxassetid://18911834990"}

if not hookfunction then 
    notify{title = "FPS UI was not loaded", text = "Your exploit does not support hookfunction", icon = "rbxassetid://18911855792"}
end

if not hookmetamethod then 
    notify{title = "Ping UI was not loaded", text = "Your exploit does not support hookmetamethod", icon = "rbxassetid://18911855792"}
else
--// Adonis bypass \\--
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua"))()
end

--// FPS & ping settings \\--
local settings = {
    fps = {
        value = 60,
        maxToSubtract = 10,
        realistic = false,
        constant = false,
        copy = false,
        copyTarget = localPlayer.Name,
        placeholder = false,
        min = 1,
        max = 3500,
        chaos = {
            on = false,
            min = 0,
            max = 0,
            noDecimals = false
        }
    },
    ping = {
        value = 60,
        maxToSubtract = 10,
        realistic = false,
        constant = false,
        copy = false,
        copyTarget = localPlayer.Name,
        placeholder = false,
        min = 1,
        max = math.huge,
        chaos = {
            on = false,
            min = 1,
            max = 2^62,
            noDecimals = false
        }
    }
}

--// Fetch FPS or ping value \\--
local function getValue(valueType: string): number
    if settings[valueType].placeholder then 
        return nil
    end
    
    local currentValue
    if valueType == "fps" then 
        currentValue = tonumber(localPlayer.Character.Head.fpsGui.FPS.Text:sub(6,-1)) or 1
    else
        currentValue = tonumber(localPlayer.Character.Head.fpsGui.Ping.Text:sub(6,-1)) or 1
    end
    
    if settings[valueType].chaos and settings[valueType].chaos.on then 
        return currentValue
    end
    
    if settings[valueType].copy then 
        if valueType == "fps" then
            return tonumber(Players[settings[valueType].copyTarget].Character.Head.fpsGui.FPS.Text:sub(6,-1))
        elseif valueType == "ping" then
            return tonumber(Players[settings[valueType].copyTarget].Character.Head.fpsGui.Ping.Text:sub(6,-1))
        end
    elseif settings[valueType].constant then 
        return math.clamp(settings[valueType].value, settings[valueType].min, settings[valueType].max)
    elseif settings[valueType].realistic then 
        local randomValue = math.random(0, math.abs(math.min(settings[valueType].maxToSubtract, 2147483647)))
        return math.clamp(settings[valueType].value - randomValue, settings[valueType].min, settings[valueType].max)
    end

    return currentValue
end

--// Parse string to number \\--
local function parseNumber(value: string, valueType: string?): number
    if value == "" then 
        if valueType == "chaosMin" then 
            return 1 
        elseif valueType == "chaosMax" then 
            return 2^62 
        end 
    end 
    
    if table.find({"inf", "infinite", "infinity"}, value) then 
        return settings.ping.chaos.on and 2^62 or math.huge
    elseif tonumber(value) then 
        return tonumber(value) >= 1 and tonumber(value) or 1
    end
    
    return 0/0
end

--// Create FPS modifier tabs \\--
local function loadFPSUI()
    local a = w:CreateFolder("FPS Modifier")
    local b = w:CreateFolder("FPS Copier")
    
    a:Toggle("Realistic FPS", function(bool)
        settings.fps.realistic = bool
    end)
    
    a:Toggle("Constant FPS", function(bool)
        settings.fps.constant = bool
    end)
    
    a:Box("FPS", "number", function(value)
        settings.fps.value = value
    end)
    
    a:Box("Realistic FPS Range", "number", function(value)
        settings.fps.maxToSubtract = value
    end)

    a:Toggle("0 FPS (will reset you)", function(bool)
        settings.fps.placeholder = bool
        if bool then
            localPlayer.Character.Humanoid.Health = 0
        end
    end)
    
    b:Toggle("Copy FPS", function(bool)
        settings.fps.copy = bool 
    end)
    
    fpsDropdown = b:Dropdown("Player List", Players:GetPlayers(), true, function(plrName)
        settings.fps.copyTarget = plrName
    end)
end

--// Create ping modifier tabs \\--
local function loadPingUI()
    local c = w:CreateFolder("Ping Modifier")
    local d = w:CreateFolder("Ping Copier")
    local e = w:CreateFolder("Ping Chaos")
    
    c:Toggle("Realistic Ping", function(bool)
        settings.ping.realistic = bool
    end)
    
    c:Toggle("Constant Ping", function(bool)
        settings.ping.constant = bool
    end)
    
    c:Box("Ping", "string", function(value)
        settings.ping.value = parseNumber(value)
    end)
    
    c:Box("Realistic Ping Range", "string", function(value)
        settings.ping.maxToSubtract = parseNumber(value)
    end)
    
    c:Toggle("Placeholder Ping (will reset you)", function(bool)
        settings.ping.placeholder = bool
        fakePing = true
        if bool then
            localPlayer.Character.Humanoid.Health = 0 
        end
    end)
    
    d:Toggle("Copy Ping", function(bool)
        settings.ping.copy = bool 
    end)
    
    pingDropdown = d:Dropdown("Player List", Players:GetPlayers(), true, function(plrName)
        settings.ping.copyTarget = plrName
    end)

    e:Toggle("Chaos Ping", function(bool)
        settings.ping.chaos.on = bool
    end)
    
    e:Toggle("No Decimals", function(bool)
        settings.ping.chaos.noDecimals = bool
    end)
    
    e:Box("Minimum Ping", "string", function(value)
        settings.ping.chaos.min = parseNumber(value, "chaosMin")
    end)

    e:Box("Maximum Ping", "string", function(value)
        settings.ping.chaos.max = parseNumber(value, "chaosMax")
    end)
end

--// Hook OnClientInvoke callback function to modify FPS \\--
if hookfunction then 
    loadFPSUI()
    for i,v in pairs(getgc()) do
        if type(v) == "function" and getfenv(v).script == localScript then
            if debug.getinfo(v).numparams == 3 then
                hookfunction(v, function() 
                    return getValue("fps") or task.wait(9e9)
                end)
            end
        end
    end
end

--// Hook ping remote to modify ping \\--
if hookmetamethod then
    loadPingUI()
    local namecall
    namecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        if not checkcaller() and method == "FireServer" and self == pingRemote then
            return namecall(self, getValue("ping") or task.wait(9e9))
        end
        return namecall(self, ...)
    end)
end

--// Refresh dropdowns \\--
Players.PlayerAdded:Connect(function()
    if hookfunction then
        fpsDropdown:Refresh(Players:GetPlayers())
    end
    if hookmetamethod then
        pingDropdown:Refresh(Players:GetPlayers())
    end
end)

Players.PlayerRemoving:Connect(function()
    if hookfunction then
        fpsDropdown:Refresh(Players:GetPlayers())
    end
    if hookmetamethod then
        pingDropdown:Refresh(Players:GetPlayers())
    end
end)

--// Loop update ping based on current settings \\--
task.spawn(function()
    local chaosMin
    local chaosMax
    while task.wait() do
        if not settings.ping.placeholder then
            if settings.ping.chaos.on then 
                chaosMin = settings.ping.chaos.min
                chaosMax = settings.ping.chaos.max
                if settings.ping.chaos.noDecimals then
                    pingRemote:FireServer(random:NextInteger(chaosMin, chaosMax))
                else 
                    pingRemote:FireServer(random:NextNumber(chaosMin, chaosMax))
                end
            elseif settings.ping.copy then
                if workspace:FindFirstChild(settings.ping.copyTarget) and workspace[settings.ping.copyTarget]:FindFirstChild("Head") then
                    pingRemote:FireServer(getValue("ping"))
                end
            end 
        end
    end 
end)

--// Emulate fake ping if placeholder ping has been used \\--
task.spawn(function()
    while task.wait(1) do 
        if fakePing and not settings.ping.placeholder then 
            pingRemote:FireServer(getValue("ping"))
        end
    end
end)
    
end
